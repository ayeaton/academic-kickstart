blogdown:::serve_site()
library(blogdown)
install.packages("blogdown")
blogdown::install_hugo(version = "0.60.1", force = TRUE)
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(7)
servr::daemon_stop(7)
library(blogdown)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
colourpicker:::colourPickerAddin()
pcs <- as.data.frame(prcomp(t(iris_data))$rotation)
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
ggsci::scale_color_aaas(name = "Species"))
library(ggplot2)
library(tidyverse)
data(iris)
iris_data <- iris %>%
select(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
pcs <- as.data.frame(prcomp(t(iris_data))$rotation)
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris$Species)) +
geom_point() +
theme_bw()  +
ggsci::scale_color_aaas(name = "Species"))
K <- 2
set.seed(10)
# Randomly assign a number, from 1 to K, to each of the observations.
rand_idx <- sample(c(TRUE, FALSE), nrow(iris_data), replace=TRUE, prob=c(0.5, 0.5))
iris_data$cluster_id <- rand_idx
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
ggsci::scale_color_aaas(name = "Species"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(gganimate)
data(iris)
# select the numeric data
iris_data <- iris %>%
select(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
pca <- prcomp(iris_data)
set.seed(12)
pcs <- as.data.frame(pca$x)
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris$Species)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Species",
values = sample(ghibli::ghibli_palettes$PonyoMedium, 3, replace = FALSE)))
K <- 2
set.seed(10)
# Randomly assign a number, from 1 to K, to each of the observations.
# Here I sampled from One or Two (because K equals two), for each data point in iris.
rand_idx <- sample(c("One", "Two"), nrow(iris_data), replace=TRUE, prob=c(0.5, 0.5))
# I add a column to the iris_data called cluster_id with the randomly assigned groups.
iris_data$cluster_id <- rand_idx
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356")))
(cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id"))
# project the cluster centroids on pca
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids), pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
(current_clust <- ggplot(as.data.frame(pca$x), aes(PC1, PC2, colour = iris_data$cluster_id)) +
geom_point() +
theme_bw()  +
geom_point(data = centroid_points , aes(PC1, PC2, colour = "Centroids")) +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroids = "#B50A2A")))
# our squared euclidean distance function
sq_euclidean_dist <- function(x1, x2) {
sum((x1 - x2) ^ 2)
}
# apply over the iris_data excluding the cluster_id
# calculate the squared euclidean distance between the row and the cluster
# centroid of cluster "One"
dist_k1 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["One",]))
})
dist_k2 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["Two",]))
})
distances <- data.frame(Cluster_one = dist_k1,
Cluster_two = dist_k2)
head(distances)
# assign each observation to the closest cluster by
# iterating over the rows of the dataframe distances and finding which column
# is the minimum value in that row.
idx <- apply(distances, 1, function(x){ which.min(x)})
idx <- ifelse(idx == 1, "One", "Two")
iris_data$cluster_id <- idx
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356")))
# Here I sampled from One or Two (because K equals two), for each data point in iris.
rand_idx <- sample(c("One", "Two"), nrow(iris_data), replace=TRUE, prob=c(0.5, 0.5))
# I add a column to the iris_data called cluster_id with the randomly assigned groups.
iris_data$cluster_id <- rand_idx
save_pcs <- pcs[,c("PC1", "PC2")]
save_pcs$cluster <- rand_idx
save_pcs$id <- 1
cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id")
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids),
pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
centroid_points$cluster <- "Centroid"
centroid_points$id <- 1
save_pcs <- rbind(save_pcs, centroid_points)
for( i in 2:5){
dist_k1 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["One",]))
})
dist_k2 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["Two",]))
})
distances <- data.frame(Cluster_one = dist_k1,
Cluster_two = dist_k2)
idx <- apply(distances, 1, function(x){ which.min(x)})
idx <- ifelse(idx == 1, "One", "Two")
iris_data$cluster_id <- idx
test <- pcs[,c("PC1", "PC2")]
test$cluster <- idx
test$id <- i
save_pcs <- rbind(save_pcs, test)
(cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id"))
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids),
pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
centroid_points$cluster <- "Centroid"
centroid_points$id <- i
save_pcs <- rbind(save_pcs, centroid_points)
}
save_pcs$group <- seq_len(nrow(save_pcs))
(current_clust <- ggplot(save_pcs, aes(PC1, PC2, group = group, color = cluster)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroid = "red")) +
transition_states(id, transition_length = 3, state_length = 1))
getwd()
save_animation(current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/kmeans.gif")
?save_animation
save_animation(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/kmeans.gif")
current_clust
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/kmeans.gif")
getwd()
rstudioapi::getActiveProject()
jids
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/2020-01-05-k-means_files/kmeans.gif")
blogdown:::serve_site()
run servr::daemon_stop(1)
servr::daemon_stop(1)
View(iris)
devtools::install_github('rstudio/rmarkdown')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
?gganimate
?gganimate
library(gganimate)
?gganimate
gganimate(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/2020-01-05-k-means_files/kmeans.gif")
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/2020-01-05-k-means_files/kmeans.gif")
# Chunk 15: chunk-label
save_pcs$group <- seq_len(nrow(save_pcs))
(current_clust <- ggplot(save_pcs, aes(PC1, PC2, group = group, color = cluster)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroid = "red")) +
transition_states(id, transition_length = 3, state_length = 1))
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/2020-01-05-k-means_files/kmeans.gif")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(gganimate)
# Chunk 2
data(iris)
# select the numeric data
iris_data <- iris %>%
select(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
# Chunk 3
pca <- prcomp(iris_data)
set.seed(12)
pcs <- as.data.frame(pca$x)
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris$Species)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Species",
values = sample(ghibli::ghibli_palettes$PonyoMedium, 3, replace = FALSE)))
# Chunk 4
K <- 2
# Chunk 5
set.seed(10)
# Randomly assign a number, from 1 to K, to each of the observations.
# Here I sampled from One or Two (because K equals two), for each data point in iris.
rand_idx <- sample(c("One", "Two"), nrow(iris_data), replace=TRUE, prob=c(0.5, 0.5))
# I add a column to the iris_data called cluster_id with the randomly assigned groups.
iris_data$cluster_id <- rand_idx
# Chunk 6
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356")))
# Chunk 7
(cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id"))
# Chunk 8
# project the cluster centroids on pca
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids), pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
(current_clust <- ggplot(as.data.frame(pca$x), aes(PC1, PC2, colour = iris_data$cluster_id)) +
geom_point() +
theme_bw()  +
geom_point(data = centroid_points , aes(PC1, PC2, colour = "Centroids")) +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroids = "#B50A2A")))
# Chunk 9
# our squared euclidean distance function
sq_euclidean_dist <- function(x1, x2) {
sum((x1 - x2) ^ 2)
}
# apply over the iris_data excluding the cluster_id
# calculate the squared euclidean distance between the row and the cluster
# centroid of cluster "One"
dist_k1 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["One",]))
})
dist_k2 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["Two",]))
})
# Chunk 10
distances <- data.frame(Cluster_one = dist_k1,
Cluster_two = dist_k2)
# Chunk 11
head(distances)
# Chunk 12
# assign each observation to the closest cluster by
# iterating over the rows of the dataframe distances and finding which column
# is the minimum value in that row.
idx <- apply(distances, 1, function(x){ which.min(x)})
idx <- ifelse(idx == 1, "One", "Two")
iris_data$cluster_id <- idx
# Chunk 13
(current_clust <- ggplot(pcs, aes(PC1, PC2, color = iris_data$cluster_id )) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356")))
# Chunk 14
# Here I sampled from One or Two (because K equals two), for each data point in iris.
rand_idx <- sample(c("One", "Two"), nrow(iris_data), replace=TRUE, prob=c(0.5, 0.5))
# I add a column to the iris_data called cluster_id with the randomly assigned groups.
iris_data$cluster_id <- rand_idx
save_pcs <- pcs[,c("PC1", "PC2")]
save_pcs$cluster <- rand_idx
save_pcs$id <- 1
cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id")
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids),
pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
centroid_points$cluster <- "Centroid"
centroid_points$id <- 1
save_pcs <- rbind(save_pcs, centroid_points)
for( i in 2:5){
dist_k1 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["One",]))
})
dist_k2 <- apply(iris_data %>% select(-cluster_id),
1, # rowwise
function(x){
sq_euclidean_dist(x,
as.numeric(cluster_centroids["Two",]))
})
distances <- data.frame(Cluster_one = dist_k1,
Cluster_two = dist_k2)
idx <- apply(distances, 1, function(x){ which.min(x)})
idx <- ifelse(idx == 1, "One", "Two")
iris_data$cluster_id <- idx
test <- pcs[,c("PC1", "PC2")]
test$cluster <- idx
test$id <- i
save_pcs <- rbind(save_pcs, test)
(cluster_centroids <- iris_data %>%
group_by(cluster_id) %>%
summarise_at(vars(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)),
~mean(., na.rm=TRUE)) %>%
column_to_rownames("cluster_id"))
centroid_points <- as.data.frame(scale(as.matrix(cluster_centroids),
pca$center, pca$scale) %*% as.matrix(pca$rotation[, c("PC1", "PC2")]))
centroid_points$cluster <- "Centroid"
centroid_points$id <- i
save_pcs <- rbind(save_pcs, centroid_points)
}
# Chunk 15: chunk-label
save_pcs$group <- seq_len(nrow(save_pcs))
(current_clust <- ggplot(save_pcs, aes(PC1, PC2, group = group, color = cluster)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroid = "red")) +
transition_states(id, transition_length = 3, state_length = 1))
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/content/post/2020-01-05-k-means_files/kmeans.gif")
blogdown:::serve_site()
getwd()
blogdown:::serve_site()
getwd()
knitr::include_graphics("figure/unnamed-chunk-12-1.png")
knitr::include_graphics("figure/unnamed-chunk-12-1.png")
knitr::include_graphics("figure/unnamed-chunk-12-1.png")
knitr::include_graphics("figure/unnamed-chunk-12-1.png")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
save_pcs$group <- seq_len(nrow(save_pcs))
(current_clust <- ggplot(save_pcs, aes(PC1, PC2, group = group, color = cluster)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroid = "red")) +
transition_states(id, transition_length = 3, state_length = 1))
?transition_states
save_pcs$group <- seq_len(nrow(save_pcs))
(current_clust <- ggplot(save_pcs, aes(PC1, PC2, group = group, color = cluster)) +
geom_point() +
theme_bw()  +
scale_color_manual(name = "Group",
values = c(One = "#0E84B4",
Two = "#9E8356",
Centroid = "red")) +
transition_states(id, transition_length = 1, state_length = 1))
anim_save(animation = current_clust,
file = "/Users/anna/Documents/academic-kickstart/static/post/2020-01-05-k-means_files/figure-html/kmeans.gif")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
